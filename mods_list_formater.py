from typing import Union
import os


def format_mod_text(mod_text: str) -> str:
    """
    Format a single line of mod text into the desired format.

    Args:
        mod_text (str): The line of text containing the mod name and URL.

    Returns:
        str: The formatted line of text.
    """
    mod_name, url = mod_text.split(" ")

    formatted_mod = f'    ("{mod_name}", "{url}"),'

    return formatted_mod


def process_file(
    input_file_path: Union[str, os.PathLike[str]],
    output_file_path: Union[str, os.PathLike[str]],
) -> None:
    """
    Process the input file to create a formatted output file.

    Args:
        input_file_path (Union[str, osPathLike[str]]): Path to the input file.
        output_file_path (Union[str, osPathLike[str]]): Path to the output file.
    """
    try:
        with open(input_file_path, "r") as file:
            lines = file.readlines()

        # Sort lines alphabetically by mod name
        sorted_lines = sorted(lines, key=lambda line: line.split(" ")[0].lower())

        formatted_lines = [format_mod_text(line.strip()) for line in sorted_lines]

        with open(output_file_path, "w") as file:
            file.write("from typing import List, Tuple\n\n")
            file.write(
                "# This file is auto-generated by mods_list_formater.py. Do not edit manually.\n"
            )
            file.write(
                "# List of mods, where each mod is a tuple (mod_folder_name, git_url)\n"
            )
            file.write("mods: List[Tuple[str, str]] = [\n")
            file.write("\n".join(formatted_lines))
            file.write("\n]\n")
    except FileNotFoundError:
        print(f"\nError: The file {input_file_path} does not exist.")
    except PermissionError:
        print(f"\nError: Permission denied when trying to write to {output_file_path}.")
    except Exception as e:
        print(f"\nAn error occurred: {e}")


def sorting_modslist_txt(input_file_path: Union[str, os.PathLike[str]]) -> None:
    """
    Sort the input file alphabetically by mod name.

    Args:
        input_file_path (Union[str, os.PathLike[str]]): Path to the input file.
    """
    try:
        with open(input_file_path, "r") as file:
            lines = file.readlines()

        # Sort lines alphabetically by mod name
        sorted_lines = sorted(lines, key=lambda line: line.split(" ")[0].lower())

        with open(input_file_path, "w") as file:
            file.writelines(sorted_lines)
    except FileNotFoundError:
        print(f"\nError: File {input_file_path} does not exist.")
    except PermissionError:
        print(f"\nError: Permission denied to access {input_file_path}.")
    except Exception as e:
        print(f"\nAn error occurred while sorting {input_file_path}: {e}")


if __name__ == "__main__":
    input_file_path = "mods_list.txt"
    output_file_path = "mods_list.py"
    process_file(input_file_path, output_file_path)
